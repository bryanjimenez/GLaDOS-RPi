#!/usr/bin/python

import RPi.GPIO as GPIO  
import urllib2
import json
from xml.dom import minidom
import sys, os
from time import sleep
#from subprocess import Popen, PIPE
import ConfigParser
#import termios
#TERMIOS = termios

FLAC_FILE="query.flac"

config = ConfigParser.ConfigParser()
config.read('default.cfg')
URL_V2T= config.get('Google', 'url_voice2text')
URL_T2V= config.get('Google', 'url_text2voice')
URL_WOLF= config.get('Wolfram', 'url')
REC_KEY= config.get('Key Bindings', 'rec_key')
QUIT_KEY= config.get('Key Bindings', 'quit_key')



cmds = ConfigParser.RawConfigParser()
cmds.read('commands.cfg')

know = ConfigParser.RawConfigParser()
know.read('knowledge.cfg')

non_ascii_chars = {
'\n':' ',
u'\xb0F': "degrees Fahrenheit",
u'\xd7': "*",
'  ':' ',
'+':'plus',
'|':'',
'(':'',
')':'',
"'":''
}
knowledge = {}
commands = {}


#-------------------------------------------------------------------------------------------------------------------------------
#def getkey():
#    fd = sys.stdin.fileno()
#    old = termios.tcgetattr(fd)
#    new = termios.tcgetattr(fd)
#    new[3] = new[3] & ~TERMIOS.ICANON & ~TERMIOS.ECHO
#    new[6][TERMIOS.VMIN] = 1
#    new[6][TERMIOS.VTIME] = 0
#    termios.tcsetattr(fd, TERMIOS.TCSANOW, new)
#    c = None
#    try:
#        c = os.read(fd, 1)
#    finally:
#        termios.tcsetattr(fd, TERMIOS.TCSAFLUSH, old)
#    return c
#-------------------------------------------------------------------------------------------------------------------------------
def remember(phrase):
	return knowledge[phrase].replace("\n","");

#-------------------------------------------------------------------------------------------------------------------------------
def reminder(phrase):
	print "not implemented"
	

#-------------------------------------------------------------------------------------------------------------------------------
def memorize(phrase):
	try:
		respond("What question would you like me to remember?")
		(question, certainty) = listen()
		
		respond("How would you like me to respond to " + question)
		(answer, certainty) = listen()

		know.set('Questions',question,answer)
	
		with open('knowledge.cfg', 'wb') as configfile:
			know.write(configfile)
	
		load_knowledge()
	except:
		print "memorize() failed" + sys.exc_info()[0]

	return "I won't forget"

#-------------------------------------------------------------------------------------------------------------------------------
def jokes(phrase):
	try:
		respond("Who's there?")
		(knocker, certainty) = listen()
	
		respond(knocker + " Who?")
		(answer, certainty) = listen()
	except:
		print "jokes() failed"

	return "HA HA HA! That was a good joke!"

#-------------------------------------------------------------------------------------------------------------------------------
def multipleReplace(text, wordDict):
    for key in wordDict:
        text = text.replace(key, wordDict[key])
    return text
#-------------------------------------------------------------------------------------------------------------------------------
def wolfram(query):
	try:
		u = urllib2.urlopen(URL_WOLF + urllib2.quote(query))

		xmldoc = minidom.parse(u)

		itemlist = xmldoc.getElementsByTagName('plaintext') 
		podlist = xmldoc.getElementsByTagName('pod') 


	# if only one pod return its result
		if(len(podlist)==1):
			response = itemlist[0].firstChild.data
	# if more than one then ..
		elif(len(podlist)>=2):
			# check if the first one contains 'input' in the title.. skip
			if "Input" not in podlist[0].getAttribute('title'):
				response = itemlist[0].firstChild.data
			else:
				response = itemlist[1].firstChild.data
		# if no pods then say not sure
		else:
			response = "I am not sure"
	except:
		print "wolfram() failed"

#	print len(response)

	return multipleReplace(response,non_ascii_chars)

#-------------------------------------------------------------------------------------------------------------------------------	
def affirm(phrase):

	try:
		respond("Did you say, " + phrase + "?")
	
		f = open(record())
		message = f.read()
		f.close()
		
		req = urllib2.Request(url=URL_V2T, data=message, headers={"Content-type": "audio/x-flac; rate=8000"})
		u = urllib2.urlopen(req)
		data = json.load(u)

		if len(data["hypotheses"])>0:
			phrase = data["hypotheses"][0]["utterance"]
			certainty = data["hypotheses"][0]["confidence"]
			print 'You: "' + phrase +'"'
			if phrase=="yes":
				return True
	except:
		print "affirm() failed"

	return False

#-------------------------------------------------------------------------------------------------------------------------------	
def listen():
	try:
		f = open(record())
		message = f.read()
		f.close()

		req = urllib2.Request(url=URL_V2T, data=message, headers={"Content-type": "audio/x-flac; rate=8000"})
		u = urllib2.urlopen(req)
		data = json.load(u)


		if len(data["hypotheses"])>0:
			phrase = data["hypotheses"][0]["utterance"]
			certainty = data["hypotheses"][0]["confidence"]
			print
			print "You: " +'"' + phrase	+ '"'
			return (phrase, certainty)	
		else:
			respond ("Could you say that again?")
			return None
	except:
		return None

#-------------------------------------------------------------------------------------------------------------------------------	
def respond(results,lang='en'):
	if results:
		if lang=='en':
			print 'GLaDOS: "' + results + '"'
		else:
			print 'Translator: "' + results + '"'
			
		phrase = ''
		words = results.split(' ')


		# google only accepts 100 chars for text to voice		
		for i in range(0, len(words)):
			if(len(phrase + ' ' + words[i]) <100):
				phrase += ' ' + words[i]
			else:
				os.system('mplayer -ao alsa -really-quiet -noconsolecontrols "http://translate.google.com/translate_tts?tl='+lang+'&q=' + phrase + '"')
				phrase = words[i]


		os.system('mplayer -ao alsa -really-quiet -noconsolecontrols "http://translate.google.com/translate_tts?tl='+lang+'&q=' + phrase + '"')

#		[results[i:i+2] for i in xrange(0, len(string), 2)]
		
#-------------------------------------------------------------------------------------------------------------------------------	
def command(phrase):
	os.system(commands[phrase])
	return "Command '" + phrase + "' was executed"
	
#-------------------------------------------------------------------------------------------------------------------------------
def record():
	try:
		os.system("rm "+FLAC_FILE +" 2>/dev/null")
		
		os.system("aplay sounds/begin.wav 2>/dev/null")	
		os.system("arecord -Dplughw:`arecord -l | grep -o ': [a-zA-Z0-9]* \[' | grep -o '[a-zA-Z0-9]*'` -f cd -d 5 -c 1 -r 8000 -t wav - 2>/dev/null | flac -0 - --sample-rate=8000 --channels=1 -o " + FLAC_FILE + " 2>/dev/null")
		os.system("aplay sounds/end.wav 2>/dev/null")	

	except:
		print "record() failed"

	return FLAC_FILE

#-------------------------------------------------------------------------------------------------------------------------------
def load_knowledge():
	knowledge.clear()
	k=know.items('Questions')
	for line in k:
		(q, a) = line
		knowledge[q] = a

def load_commands():
	commands.clear()
	c=cmds.items('Commands')
	for cmd in c:
		(q, a) = cmd
		commands[q] = a
#-------------------------------------------------------------------------------------------------------------------------------

def dialogue():
	try:
		(phrase, certainty) = listen()
	except:
		print 'try again...'
		return None
		
	results=''
	firstWord = phrase.split(' ')[0]	

	if firstWord in functions:
		results = functions[firstWord](phrase)
		respond(results)
		return results
			
	if phrase in commands:
		results = command(phrase)
		respond(results)
		return results		
		
	if certainty >= .70:
		if phrase in knowledge:
			results = remember(phrase)
		else:
			results = wolfram(phrase)
	else:
		if affirm(phrase)==True:
			if phrase in knowledge:
				results = remember(phrase)
			else:
				results = wolfram(phrase)
		
	respond(results)
	return results
#-------------------------------------------------------------------------------------------------------------------------------	
def terminate(phrase):
	respond("See you soon!")
	os.system("aplay sounds/powerdown.wav 2>/dev/null")
	GPIO.cleanup()	
	sys.exit(0)
#-------------------------------------------------------------------------------------------------------------------------------	
def translate(command):
        try:
		#respond("What would you like me to translate?")
		#(phrase, certainty) = listen()

		#phrase = "I love you"

		phrase = ' '.join(command.split(' ')[1:-2])
		
		language = command.split(' ')[-1]				

		print "phrase"+phrase

		print "l" + language


		languages = {
		'Spanish' : 'es',
		'French' : 'fr',
		'German' : 'de'
		}

			
#		phrase = phrase.partition(' ')[1]				


		fromLang="en"
		toLang= languages[language]

		print "ln" + toLang

		URL_TRANS = "http://translate.google.com/translate_a/t?client=t&hl="+fromLang+"&tl="+toLang+"&text=" + urllib2.quote(phrase)

		print URL_TRANS

#		URL_TRANS = "http://translate.google.com/translate_a/t?client=t&&hl="+fromLang+"&sl=auto&tl="+toLang+"&ie=UTF-8&oe=UTF-8&multires=1&otf=1&ssel=0&tsel=0&uptl="+toLang+"&alttl=hi&sc=1&text=" + urllib2.quote(phrase)


		headers = { 'User-Agent' : 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36'}
		req = urllib2.Request(URL_TRANS,None,headers)
		u = urllib2.urlopen(req)

		#print u.read()
		result= u.read().split(',')[0][4:-1]
		#print(result)
		respond(result,toLang)
	except Exception as e:
		print "translate() failed", e




#[[["Je t'aime","I love you","",""]],,"en",,[["Je t'aime",[1],true,false,1000,0,2,0]],[["I you love",1,[["Je t'aime",1000,true,false]],[[0,10]],"I love you"]],,,[["en"]],14]


#-------------------------------------------------------------------------------------------------------------------------------	
def countdown(phrase):
	respond("9, 8, 7, 6, 5, 4, 3, 2, 1, Blast off!")



#TODO
# Do regular expression matching here instead
	
functions = {
'memorize': memorize,
'remember': memorize,
'remind me':reminder,
'knock knock': jokes,
'goodbye': terminate,
'shut down': terminate,
'quit': terminate,
'translate': translate,
#'how do you say [] in []': translate,
'countdown': countdown
}
	
#print "!"+ sys.argv[1]+"!"

print ''	
os.system("aplay sounds/powerup.wav 2>/dev/null")
  
GPIO.setmode(GPIO.BOARD)
GPIO.setup(3,GPIO.IN)

load_knowledge()
load_commands()

sleep(1)

while True:
#	keypress=getkey()
#	if not GPIO.input(3) or keypress==REC_KEY:  
	if not GPIO.input(3):  
		dialogue()
#		translate()
#		print GPIO.input(3)
#	elif keypress==QUIT_KEY:
#		terminate()

